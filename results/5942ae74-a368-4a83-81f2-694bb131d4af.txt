[rfc1.txt]:     IMP Transmission and Error Checking
[rfc1.txt]:   The software for the ARPA Network exists partly in the IMPs and
[rfc1.txt]:   the IMPs and it is the responsibility of the HOST groups to agree on
[rfc1.txt]:   sites met several times to discuss the HOST software and initial
[rfc1.txt]:   and Steve Crocker of UCLA, who met during the fall and winter.  The
[rfc1.txt]:   I present here some of the tentative agreements reached and some of
[rfc1.txt]:   and reactions are expected.
[rfc1.txt]:   together with its header.  The header is 16 bits and contains the
[rfc1.txt]:   status information about the message and send the information back to
[rfc1.txt]:   handle all 32 links simultaneously, the links serve their purpose only
[rfc1.txt]:   always functioning and there are always 32 of them.
[rfc1.txt]:   The objections to the link structure notwithstanding, the links are
[rfc1.txt]:   easily programmed within the IMPs and are probably a better
[rfc1.txt]:IMP Transmission and Error Checking
[rfc1.txt]:   and are the unit of data transmission from IMP to IMP.  A 24 bit
[rfc1.txt]:   cyclic checksum is computed by the transmission hardware and is
[rfc1.txt]:   receiving hardware and is checked against the transmitted checksum.
[rfc1.txt]:   until the community of users experiments with the network and begins
[rfc1.txt]:   immediate and easy use by a wide class of users.  With this goal, it
[rfc1.txt]:   experience at SRI where it has saved much dispute and wasted effort.
[rfc1.txt]:   if it is a TTY and has dialed up the remote HOST.  After some
[rfc1.txt]:   consideration of the problems of initiating and terminating such a
[rfc1.txt]:   primitive to establish a connection with a remote HOST and a primitive
[rfc1.txt]:   operating system must select a free link and send a message over link
[rfc1.txt]:   The operating system in the remote HOST must agree and send back an
[rfc1.txt]:   link to initiate a connection and both send request messages at
[rfc1.txt]:   which the HOST of lower priority gives way and selects another free
[rfc1.txt]:   lower priority HOST sends both an acceptance and another request.
[rfc1.txt]:   HOST will generate the same echos, expect the same log-in sequence and
[rfc1.txt]:   special buffering techniques are often employed, and these are
[rfc1.txt]:   interrupt characters takes place and buffering techniques appropriate
[rfc1.txt]:   We propose that each message carry a message number, bit count, and a
[rfc1.txt]:   we suggest a 16-bit end-around-carry sum computed on 1152 bits and
[rfc1.txt]:   console.  Culler's consoles at UCSB and Englebart's at SRI are at
[rfc1.txt]:   parts, an essentially local, immediate and trivial part and a remote,
[rfc1.txt]:   more lengthy and significant part.  As a simple example, consider a
[rfc1.txt]:   user at a console consisting of a keyboard and refreshing display
[rfc1.txt]:   string of characters until a carriage return is encountered and then
[rfc1.txt]:   types H E L L O <- <- P <CR> where <- is rubout and <CR> is
[rfc1.txt]:   -- that is the part scanning for <- and <CR> -- be resident in our
[rfc1.txt]:   sent, i.e., H E L P <CR>, and the screen would be managed locally.
[rfc1.txt]:   terminal and how the terminal is to respond to inputs from its
[rfc1.txt]:   keyboard, Lincoln Wand, etc.  Then, as a part of the initial protocol,
[rfc1.txt]:b.  After Link Establishment and Log-in
[rfc1.txt]:c.  After Receipt and Compilation of the DEL program
[rfc1.txt]:   and use NLS through the DEL program.
[rfc1.txt]:   and UTAH will use NLS with graphics.
[rfc10.txt]:Shapiro and Bill English SRI, Steve Crocker at UCLA, John Haefner at
[rfc10.txt]:RAND, Paul Rovner and Jim Curry at Lincoln Labs.  Membership is not closed.
[rfc10.txt]:strategies for using the network, and initial experience with the network.
[rfc10.txt]:may be produced at any site by anybody and included in this series.
[rfc10.txt]:without introductory or background explication, and explicit questions
[rfc10.txt]:These standards (or lack of them) are stated explicitly for two reasons.
[rfc10.txt]:authoritative, and we hope to promote the exchange and discussion of 
[rfc10.txt]:hesitancy to publish something unpolished, and we hope to ease this
[rfc10.txt]:        2.  Author and affiliation
[rfc10.txt]:Reproduction if desired may be handled locally.
[rfc10.txt]:        The Rand Corp.                          (213) 393-0411
[rfc10.txt]:        Bolt, Beranek and Newman                (617) 491-1850
[rfc11.txt]:       2.2  Connections and Links . . . . . . . . . . . . . . . .   2
[rfc11.txt]:            2.4.2  HOST-HOST protocol and control messages  . . .   8
[rfc11.txt]:                   3.3.2.1  Handler . . . . . . . . . . . . . . .  18
[rfc11.txt]:   and (2) the implementation of the corresponding programs in GORDO
[rfc11.txt]:   The first section is closely related to the BBN reports No. 1822 and
[rfc11.txt]:   1763[1] and specifies the HOST functions for exchanging messages.  It
[rfc11.txt]:   mostly deals with links and connections, message structure,
[rfc11.txt]:   transactions, and control messages.
[rfc11.txt]:   functions are implemented and integrated into GORDO.  It is involved
[rfc11.txt]:   into the network and distributes incoming messages to the appropriate
[rfc11.txt]:2.2  Links and Connections  (See figure 1)
[rfc11.txt]:         users, and (2) send or receive messages over those connections.
[rfc11.txt]:         users in establishing, identifying, and maintaining these
[rfc11.txt]:         Network programs and used by them.
[rfc11.txt]:         Note here that users are only interested in connections and are
[rfc11.txt]:         completely unaware of links.  Relationships between links and
[rfc11.txt]:   connection, (b) primary connection, and (c) auxiliary connection.
[rfc11.txt]:      This connection has a special status and is unique between a pair
[rfc11.txt]:      control messages back and forth.  Control messages are basic to
[rfc11.txt]:      the establishment/deletion of standard connections.  (See 2.4.2)
[rfc11.txt]:      Let us describe now the standard connections.
[rfc11.txt]:            * Is unique between a pair of users and is the first to be
[rfc11.txt]:            * Is mainly used for transmitting control commands, e.g.,
[rfc11.txt]:            * Is opened in parallel to a primary connection and is not
[rfc11.txt]:             [Figure 1 - Links and Connections - see PDF file]
[rfc11.txt]:      marking, but excluding the 32 bit leader and any padding.  To
[rfc11.txt]:          inputs and outputs a 16-bit element.  This function is defined
[rfc11.txt]:   user level, in the form of subroutine calls and parameters.  However,
[rfc11.txt]:   user's disposal for creating/breaking connections and
[rfc11.txt]:   be considered as a kind of interface between the user level and the
[rfc11.txt]:   2.4.2  HOST-HOST protocol and control messages
[rfc11.txt]:   by users) and covers a HOST-HOST dialogue.
[rfc11.txt]:   connections and consists in exchanging control messages over the
[rfc11.txt]:   are here at the HOST level (Network programs), and therefore control
[rfc11.txt]:   Consider now the previous transactions and describe for each of them
[rfc11.txt]:                      links #12 and 15 for exchanging user messages.
[rfc11.txt]:                      standard log-in procedures.
[rfc11.txt]:         HOST(y) operating system and then to call for the URSA program
[rfc11.txt]:         The Network programs at both ends will use the link #12 and #15
[rfc11.txt]:         for passing along messages.  These messages are standard
[rfc11.txt]:         established between HOST(x) and HOST(y).  For so doing control
[rfc11.txt]:         #25 and 21 for exchanging standard messages.
[rfc11.txt]:         a CLOSE subroutine and then the Network programs at both ends
[rfc11.txt]:         Remark 1 - In (a), (c), and (e) HOST(y) may answer back a
[rfc11.txt]:         sequence, connection already opened, and so forth.  The message
[rfc11.txt]:   The file system is page oriented.  It is composed of files and
[rfc11.txt]:   directories.  A file consists of a heading and a number of pages
[rfc11.txt]:   *  A process is a program (procedures and data) plus its logical
[rfc11.txt]:      and controlled by the GORDO scheduler.
[rfc11.txt]:   Remark:  Through this note the words process and program are used
[rfc11.txt]:          [Figure 3 - Virtual Space and Coupling - see PDF file]
[rfc11.txt]:   The system is based upon two main programs: the "Network" and the
[rfc11.txt]:   "Handler".
[rfc11.txt]:   The Handler is an I/O interrupt routine closely related to the IMP-
[rfc11.txt]:   closing connections and transmitting/receiving network messages.  For
[rfc11.txt]:   *  it establishes, identifies, and breaks the links upon using the
[rfc11.txt]:      which messages and requests are exchanged (connection shared
[rfc11.txt]:   *  it communicates with the Handler by means of a shared page (I/O
[rfc11.txt]:      The Network program establishes, identifies, and breaks links and
[rfc11.txt]:                        connection #.  See 3.4 the way it is handled.
[rfc11.txt]:                                    because user identifications and
[rfc11.txt]:            *  Specific feature 2:  This table is handled in parallel
[rfc11.txt]:                                    link # and remote HOST #, i.e., all
[rfc11.txt]:            This table keeps track of all the incoming (input) links and
[rfc11.txt]:                        upon the incoming link # and the remote HOST #.
[rfc11.txt]:                                    way it is handled.
[rfc11.txt]:      (input and output).  These buffers are used for either passing
[rfc11.txt]:         Handler and the Network program.
[rfc11.txt]:         or de-assembled (output) word by word by the Handler, e.g., a
[rfc11.txt]:         output buffer, is shipped out word by word by the Handler.
[rfc11.txt]:                                Handler (read from hardware) and emptied
[rfc11.txt]:         *  These pages shared between the network and the user
[rfc11.txt]:            the messages back and forth, and (2) exchanging control
[rfc11.txt]:         *  Coupling:  Coupled to both a user process virtual space and
[rfc11.txt]:                                  Network and emptied by the user.
[rfc11.txt]:         *  This page allows the Network and the Handler programs to
[rfc11.txt]:         work independently on different messages and so contributes to
[rfc11.txt]:         an overlapping.  For instance, when the Handler is busy
[rfc11.txt]:         out, so that it can reinitiate the Handler as soon as it is
[rfc11.txt]:   3.3.2.1  Handler program
[rfc11.txt]:      and reception are carried out in a full duplex mode.
[rfc11.txt]:      *  Location:  Core resident.  The Handler is in the same memory
[rfc11.txt]:                    zone as the operating system and can be considered
[rfc11.txt]:                       Handler).
[rfc11.txt]:                           (32 bits) and makes use of "Write" orders for
[rfc11.txt]:                           word and makes use of "Read" orders for
[rfc11.txt]:      This program serves the user for opening/closing connections and
[rfc11.txt]:      transmitting/receiving messages.  It uses the Handler as an aid
[rfc11.txt]:      For the GORDO point of view it is a regular process and treated as
[rfc11.txt]:                    asleep and called in core when awakened by a
[rfc11.txt]:                      issued either by a user process or by the Handler.
[rfc11.txt]:                           checksum..), and passes them along to the
[rfc11.txt]:                           Handler for transmission.
[rfc11.txt]:                            for indirectly initiating the Handler).
[rfc11.txt]:   However, to get a quick understanding of the implementation we list
[rfc11.txt]:   Consider some of the transactions at user's disposal (See 2.4) and
[rfc11.txt]:   will delineate (i) what the user program does and (ii) what the
[rfc11.txt]:              *  it explores the Network mail box directory and accesses
[rfc11.txt]:                 3.3.1.1 (a)) and selects the first bit = 0, e.g., the
[rfc11.txt]:              *  it prepares the message text ENQ PRIM 0 0 a and formats
[rfc11.txt]:              *  it checks the Handler state (bit in I/O locked page).
[rfc11.txt]:                 If the Handler is free, it stores the 'ready to go'
[rfc11.txt]:                 page, initiates the Handler, and goes to sleep.  Else
[rfc11.txt]:   After a while the Handler wakes up the Network process because it has
[rfc11.txt]:                 (i), the incoming link # (beta), and connection # (k);
[rfc11.txt]:                 just been opened) and wakes up the user process;
[rfc11.txt]:              *  it turns on the 'user-net' bit of this page and wakes
[rfc11.txt]:                 sequence the connection shared pages and selects the
[rfc11.txt]:                 shared page k, formats it into a complete message and
[rfc11.txt]:                 transmits to the Handler in a very similar way as above
[rfc15.txt]:   The details  and terminology are defined by Deloche and others in
[rfc15.txt]:   programmers, and are most likely a part of the resident monitor,
[rfc15.txt]:   and interpreters.  The first network-related subsystem should allow
[rfc15.txt]:   users at HOST A to connect to HOST B and appear as a regular terminal
[rfc15.txt]:   .R TELNET<CR>                       The PDP-10 run command
[rfc15.txt]:    ------------                       is issued to call and start
[rfc15.txt]:   through the PDP-10 (user Host) and on to the 940 (serving HOST.)
[rfc15.txt]:   required between the UCLA Sigma 7 and the PDP-10, for example).
[rfc15.txt]:                                       and the file from UTAH.
[rfc15.txt]:                                       the TELNET command, to send
[rfc15.txt]:   HOST between the remote user and the serving HOST.  Telnet commands
[rfc15.txt]:                                       between this character and
[rfc15.txt]:   LOGOUT<CR>                          Telnet issues the logout command
[rfc15.txt]:                                       If the user simply rubs out and
[rfc15.txt]:   COPY FILE                           A file copying command is
[rfc15.txt]:   These TELNET commands are accepted when the TELNET subsystem is first
[rfc15.txt]:   host and a manual for the serving host, the network can be
[rfc15.txt]:   of-line, in place of the original handwritten arrows.]
[rfc17.txt]:        ii) Much local I/O and/or CPU time between messages - is it
[rfc17.txt]:    generates an RFNM and then discovers it cannot, for some reason,
[rfc17.txt]:    1.  Abhi Bhushan, Proj. MAC         10.  Sal Aranda, SDC
[rfc17.txt]:Request for Comments: 17a                    Bolt Beranek and Newman Inc
[rfc17.txt]:   between messages and non-use of a link due to Host program delays in
[rfc17.txt]:   transmission from the source IMP and is unblocked when the RFNM
[rfc17.txt]:   between the Host and the IMP.
[rfc17.txt]:   use during initiation of communication between the Host and its IMP.
[rfc17a.txt]:Request for Comments: 17a                    Bolt Beranek and Newman Inc
[rfc17a.txt]:   between messages and non-use of a link due to Host program delays in
[rfc17a.txt]:   transmission from the source IMP and is unblocked when the RFNM
[rfc17a.txt]:   between the Host and the IMP.
[rfc17a.txt]:   use during initiation of communication between the Host and its IMP.
[rfc18.txt]:and link 0 be used for IMP-IMP control.
[rfc18.txt]:This will facilitate communication between Hosts and reduce delays
[rfc19.txt]:There is a wide variance in swap rates between core and auxiliary store
[rfc19.txt]:   and B, in that order, at a time when user B is in HOST core.  B
[rfc19.txt]:   would have to be swapped out, A in, and the first message accepted--
[rfc19.txt]:   only to discover that now A must be swapped out and B back in again.
[rfc19.txt]:   If the HOST could a) read the IMP's queue of waiting messages and b)
[rfc19.txt]:   mechanism for improvement of network efficiency would be at hand.
[rfc19.txt]:   transfer such a file to and from a swap-bound HOST.  Unfortunately,
[rfc19.txt]:   extent:  if we assume a 50 kilobit/sec line and support further that
[rfc19.txt]:   require slightly different handling of RFNMs in this case) this
[rfc2.txt]:         1a2c Passing interrupts regarding the status of links and/or
[rfc2.txt]:         between a HOST user and another HOST.
[rfc2.txt]:         may open a primary link, and that link remains open until it is
[rfc2.txt]:         logging in to the remote host (using the remote hosts standard
[rfc2.txt]:      between itself and a user program in a connected HOST.
[rfc2.txt]:         establishes them, and therefore are closed when that subsystem
[rfc2.txt]:         particular HOST will be regarded as an error, and the request
[rfc2.txt]:         2b1c Standard Transmission Character Set
[rfc2.txt]:            2b1c1 There will be a standard character set for
[rfc2.txt]:            transmission of data over the primary links and control
[rfc2.txt]:                  to the requestor, and the link is established.
[rfc2.txt]:                  than that of B(Nb), then A ignores the request, and
[rfc2.txt]:                  2b1d4b2 If, on the other hand, Na<Nb, A:
[rfc2.txt]:                     2b1d4b2c Aborts its own request, and repeats the
[rfc2.txt]:                     error and initiate entry to a panic routine(error).
[rfc2.txt]:         program in each of the HOSTs (A and B).
[rfc2.txt]:               2c1d2b The program in HOST A and B should be able to
[rfc2.txt]:   so as to help isolate software and hardware bugs.
[rfc2.txt]:         fields in the string to be checked serially, and adding the
[rfc2.txt]:            3b1a2 Several fields may be added and folded in parallel, if
[rfc2.txt]:                  nth field, and then add in an appropiately sized carry
[rfc2.txt]:                  from that addition (and repeat the desired number of
[rfc2.txt]:               computing the checksum, and a suitable checksum field
[rfc2.txt]:         3b1b If a message is divided into groups of fields, and each
[rfc2.txt]:         and adding it in (successively) to the checksum of the next
[rfc2.txt]:               everything (YES!!) and by what means can we use to
[rfc2.txt]:         4a1d Decode header, and pass message to correct recipient as
[rfc2.txt]:         identified by source, and link.
[rfc2.txt]:      4b4 Inform other HOSTs as to status of primary and auxilliary
[rfc2.txt]:      4b5 Inform other HOSTs as to status of programs using primary and
[rfc2.txt]:            5c1c1 This means that the header and other control
[rfc2.txt]:      6a2 Links will be transparent to the monitor, and controlled by
[rfc20.txt]:   For concreteness, we suggest the use of standard 7-bit ASCII embedded
[rfc20.txt]:   standard code given on the attached page, copies from USAS X3, 4-
[rfc20.txt]:USA Standard Code for Information Interchange
[rfc20.txt]:   systems, and associated equipment.
[rfc20.txt]:2. Standard Code
[rfc20.txt]:3. Character Representation and Code Identification
[rfc20.txt]:   The standard 7-bit character representation, with b7 the high-order
[rfc20.txt]:   bit and b1 the low-order bit, is shown below:
[rfc20.txt]:   decimal equivalent of the binary number formed by bits b7, b6, and
[rfc20.txt]:   b5, collectively, forms the column number, and the decimal equivalent
[rfc20.txt]:   of the binary number formed by bits b4, b3, b2, and b1, collectively,
[rfc20.txt]:   The standard code may be identified by the use of the notation ASCII
[rfc20.txt]:   the latest issue of the standard.  To explicitly designate a
[rfc20.txt]:   2/6         &           Ampersand
[rfc20.txt]:      2 The use of the symbols in 2/2, 2/7, 2/12, 5/14, /6/0, and 7/14
[rfc20.txt]:   without determining that there is agreement between sender and
[rfc20.txt]:   and qualify information in a logical sense.  There is a group of four
[rfc20.txt]:   time fill and media fill.
[rfc20.txt]:   and entirely transmitted through to the ultimate destination.  Such a
[rfc20.txt]:   terminate a sequence of characters started with STX and transmitted
[rfc20.txt]:   contained one or more texts and any associated headings.
[rfc20.txt]:   display devices and the skip function on punched cards.)
[rfc20.txt]:   between sender and recipient of data.
[rfc20.txt]:   character set of the standard code table until a Shift In character
[rfc20.txt]:   standard code table.
[rfc20.txt]:   and US (Unit Separator): These information separators may be used
[rfc20.txt]:   and US is least inclusive.  (The content and length of a File, Group,
[rfc20.txt]:   6.1 This standard does not define the means by which the coded set is
[rfc20.txt]:   standard does not define data communication character structure, data
[rfc20.txt]:   6.2 Deviations from the standard may create serious difficulties in
[rfc20.txt]:   information interchange and should be used only with full cognizance
[rfc20.txt]:   Furthermore, this standard does not specify a type style for the
[rfc20.txt]:   for example, to stylize the graphics in code positions 2/1 and 5/15
[rfc20.txt]:   into those frequently associated with logical OR (|) and logical NOT
[rfc20.txt]:   6.5 The appendixes to this standard contain additional information on
[rfc20.txt]:   the design and use of this code.
[rfc21.txt]:    p. 11 "The IMP program can handle up to 63 active transmit links
[rfc21.txt]:    and 63 active receive links at a time.  If the Host attempts to
[rfc21.txt]:    the Host, and the message will be discarded."
[rfc21.txt]:    p. 13  Message type 6 is no longer assigned, and message type 10
[rfc21.txt]:    This memo has been obsoleted by developments at UCLA and
[rfc22.txt]:   NWG/RFC 11 has been modified at UCLA; and will be republished.  In
[rfc22.txt]:   given packet, although this is not mandatory.
[rfc22.txt]:   host. ("L" or "Li" mean Link#, and are binary values.)
[rfc23.txt]:decode and take action on successive control messages until the control
[rfc24.txt]:This note is a revision of NWG/RFC 10 and 16.
[rfc24.txt]:the strategies for using the network, and initial experience with the
[rfc24.txt]:may be produced at any site by and included in this series.
[rfc24.txt]:and explicit questions without any attempted answers are all acceptable.
[rfc24.txt]:These standards (or lack of them) are stated explicitly for two reasons.
[rfc24.txt]:authoritative, and we hope to promote the exchange and discussion of
[rfc24.txt]:hesitancy to publish something unpolished, and we hope to ease this
[rfc24.txt]:        2.  Author and affiliation
[rfc24.txt]:Reproduction if desired may be handled locally.
[rfc24.txt]:        The Rand Corporation                    (213) 393-0411
[rfc24.txt]:        Bolt, Beranek and Newman                (617) 491-1850
[rfc25.txt]:instrumentation purposes, and because 256 link numbers are many more
[rfc27.txt]:This note is a revision of NWG/RFC 10, 16, and 24.
[rfc27.txt]:the strategies for using the network, and initial experience with the
[rfc27.txt]:may be produced at any site by anybody and included in this series.
[rfc27.txt]:explication, and explicit questions without any attempted answers are
[rfc27.txt]:These standards (or lack of them) are stated explicitly for two
[rfc27.txt]:ipso facto authoritative, and we hope to promote the exchange and
[rfc27.txt]:there is a natural hesitancy to publish something unpolished, and we
[rfc27.txt]:        2.  Author and affiliation
[rfc27.txt]:Reproduction, if desired, may be handled locally.
[rfc27.txt]:        The Rand Corporation            (213) 393-0411
[rfc27.txt]:        Bolt, Beranek and Newman        (617) 491-1850
[rfc28.txt]:system.  I would like any comments relative to Network time standards
[rfc3.txt]:Rulifson and Bill Duvall at SRI, and Steve Crocker and Gerard Deloche
[rfc3.txt]:strategies for using the network, and initial experiments with the network.
[rfc3.txt]:may be produced at any site by anybody and included in this series.
[rfc3.txt]:without introductory or background explication, and explicit questions
[rfc3.txt]:These standards (or lack of them) are stated explicitly for two reasons.
[rfc3.txt]:authoritative, and we hope to promote the exchange and discussion of 
[rfc3.txt]:hesitancy to publish something unpolished, and we hope to ease this
[rfc3.txt]:        2.  Author and affiliation
[rfc3.txt]:Reproduction if desired may be handled locally.  
[rfc3.txt]:Software and are by Steve Crocker and Bill Duvall, separately.
[rfc30.txt]:This note is a revision of NWG/RFC 10, 16, 24, and 27.
[rfc30.txt]:strategies for using the network, and initial experience with the network.
[rfc30.txt]:may be produced at any site by anybody and included in this series.
[rfc30.txt]:without introductory or background explication, and explicit questions 
[rfc30.txt]:These standards (or lack of them) are stated explicitly for two reasons.
[rfc30.txt]:authoritative, and we hope to promote the exchange and discussion of
[rfc30.txt]:hesitancy to publish something unpolished, and we hope to ease this
[rfc30.txt]:        2.  Author and affiliation
[rfc30.txt]:Reproduction, if desired, may be handled locally.
[rfc30.txt]:        Bolt, Beranek and Newman        (617) 491-1850
[rfc31.txt]:                       Bolt, Beranek, and Newman
[rfc31.txt]:                         William R. Sutherland
[rfc31.txt]:   probably precludes standardization of the content and form of inter-
[rfc31.txt]:   computer messages.  There is some hope, however, that a standard way
[rfc31.txt]:   of defining and describing message forms can be developed and used to
[rfc31.txt]:   a standard vehicle for describing numerous algorithms, and BNF serves
[rfc31.txt]:   as a standard for describing language syntax, a message description
[rfc31.txt]:   language would be useful as a standard vehicle for defining message
[rfc31.txt]:   handling protocol and one can expect the ASCII protocols to be used.
[rfc31.txt]:   The topic of concern is how to describe the content and intent of a
[rfc31.txt]:   binary message body when the network header and trailer details have
[rfc31.txt]:   this stream is sliced up into boxes, and tables generally describe
[rfc31.txt]:   one's understanding of the message content and the alternatives
[rfc31.txt]:   each containing one character.  Standard language description methods
[rfc31.txt]:   (BNF) then show how the characters can be concatenated and what
[rfc31.txt]:   fields in the message and the interpretation to be placed on the bits
[rfc31.txt]:     A message description is initially intended as a reference standard
[rfc31.txt]:   to be written down on paper and made available to new users of a
[rfc31.txt]:   computer network.  From this standard, the new user can discover the
[rfc31.txt]:   kind and form of the binary data being exchanged over the network.
[rfc31.txt]:   can envision the promulgation of standards for newly developed binary
[rfc31.txt]:   future, the text of a binary format standard could be used as input
[rfc31.txt]:   binary message will consist of a title and four declarative sections.
[rfc31.txt]:     4) The number of bits in each field and any special considerations
[rfc31.txt]:        structured picture of lines and points.
[rfc31.txt]:   name, and for lack of a better way, an English description of what
[rfc31.txt]:   standard digits construed as binary if zeros and ones.  Other numbers
[rfc31.txt]:   negative numbers and for numbers whose bit representation is smaller
[rfc31.txt]:   message part) by indicating how other fields can be combined and is
[rfc31.txt]:   field name with an equal sign (=) and a number.  For example:
[rfc31.txt]:   indicates that MS consists of field EXP interpreted as an integer and
[rfc31.txt]:   expression and the optional field description in brackets ([ and ]).
[rfc31.txt]:   which defines a format of 2 and perhaps 3 fields.
[rfc31.txt]:   alternative and each alternative then includes its value for the
[rfc31.txt]:   determining field and the alternative field then present.
[rfc32.txt]:Re: NWG/RFC's #28 and 29.
[rfc32.txt]:include any internal HOST delays, and these delays may be an appreciable
[rfc32.txt]:source and the destination of the message, although such clocks would
[rfc32.txt]:accuracies over periods of many hours), and a range of about 24 hours.
[rfc32.txt]:incremented at each clock pulse), and therefore the clock may require
[rfc32.txt]:At UCLA, we presently have two clocks on the Sigma 7, and one of these
[rfc33.txt]:   information to write a NCP, and I will send out another memo or so
[rfc33.txt]:   and
[rfc33.txt]:   and
[rfc33.txt]:   Agency, Department of Defense, under contracts AF30(602)-4277 and
[rfc33.txt]:   machines and operating systems involved in the network vary widely.
[rfc33.txt]:   Los Angeles), and a DEC PDP-10 (University of Utah).  The only
[rfc33.txt]:   different in external appearance and implementation.  Furthermore, no
[rfc33.txt]:   Of the networks which have reached the operational phase and been
[rfc33.txt]:   computers and operating systems found in the ARPA network.  For
[rfc33.txt]:   at Berkeley, MIT, Lincoln Laboratory, and System Development
[rfc33.txt]:   The network is seen as a set of data entry and exit points into which
[rfc33.txt]:   same) computer, and from which such messages emerge.  The format of
[rfc33.txt]:   such messages and the operation of the network was specified by the
[rfc33.txt]:   network contractor (BB&N) and it became the responsibility of
[rfc33.txt]:   additional constraints and provide such protocol as necessary for
[rfc33.txt]:   details the decisions that have been made and the considerations
[rfc33.txt]:   and W. Duvall of SRI participated in the early design effort of the
[rfc33.txt]:   protocol and in the discussions of NIL.  G. Deloche of Thompson-CSF
[rfc33.txt]:   participated in the design effort while he was at UCLA and provided
[rfc33.txt]:   considerable documentation.  J. Curry of Utah and P. Rovner of
[rfc33.txt]:   Lincoln Laboratory reviewed the early design and NIL.  W. Crowther of
[rfc33.txt]:   Bolt, Beranek and Newman, contributed the idea of a virtual net.  The
[rfc33.txt]:   BB&N staff provided substantial assistance and guidance while
[rfc33.txt]:   We have found that, in the process of connecting machines and
[rfc33.txt]:   resulting mixture of ideas, discussions, disagreements, and
[rfc33.txt]:   resolutions has been highly refreshing and beneficial to all
[rfc33.txt]:   involved, and we regard the human interaction as a valuable by-
[rfc33.txt]:      site, and allows HOSTs access into the network.  The configuration
[rfc33.txt]:      from a store-and-forward communications network.  A companion
[rfc33.txt]:   messages are generated by a HOST and sent to its IMP for transmission
[rfc33.txt]:   between the sending HOST and the receiving HOST the message will be
[rfc33.txt]:   sent.  Each link is unidirectional and is controlled by the network
[rfc33.txt]:   generated by the IMP connected to the receiving HOST, and the RFNM is
[rfc33.txt]:   in each direction and that no relationship among these is imposed by
[rfc33.txt]:   The purpose of the link and RFMN mechanism is to prohibit individual
[rfc33.txt]:   wide band, and to a large extent the HOST-HOST protocol cooperates
[rfc33.txt]:   In order to delimit the length of the message, and to make it easier
[rfc33.txt]:   hardware interface between the IMP and HOST appends a one followed by
[rfc33.txt]:   appended bits are called padding.  Except for the marking and
[rfc33.txt]:   respects: each supports research independent of the network, and each
[rfc33.txt]:   possess elaborate and definite accounting and resource allocation
[rfc33.txt]:   would not be tolerated and we avoided such restrictions.
[rfc33.txt]:   Control Program, a control link, control commands, sockets, and
[rfc33.txt]:   connections, break connections, switch connections, and control flow.
[rfc33.txt]:   sequence of one or more control commands.  As an example, one of the
[rfc33.txt]:   kinds of control commands is used to assign a link and initiate a
[rfc33.txt]:   has been terminated.  A partial sketch of the syntax and semantics of
[rfc33.txt]:   control commands is given in the next section.
[rfc33.txt]:   one end of a connection, and a connection is fully specified by a
[rfc33.txt]:   A socket is either a receive socket or a send socket, and is so
[rfc33.txt]:   of sockets for each used number at each HOST.  (AEN stands for
[rfc33.txt]:   The relationship between sockets and processes is now describable
[rfc33.txt]:   send sockets and 128 receive sockets.  A process may request from the
[rfc33.txt]:   the same virtual net, and such a process is controlled by the same
[rfc33.txt]:   socket may be in any virtual net and at any HOST, and the process may
[rfc33.txt]:   quite complex implementation, and are not germane to the rest of this
[rfc33.txt]:   have the same user number and HOST number, and the connection is
[rfc33.txt]:   calls and control commands; in the section after next, we consider
[rfc33.txt]:   Here we sketch the mechanisms of establishing, switching and breaking
[rfc33.txt]:   via system calls and with other NCPs via control commands.  We
[rfc33.txt]:   therefore begin with a partial description of system calls and
[rfc33.txt]:   control commands.
[rfc33.txt]:   Each port may be connected to a sequential I/O device, and while
[rfc33.txt]:      and             +- are 8-bit AEN's (see Figure 2)
[rfc33.txt]:            The lower-order bits of <AEN 1> and <AEN 2> must agree, and
[rfc33.txt]:            The NCP concatenates <AEN 1> and <AEN 2> each with the user
[rfc33.txt]:            number of the process and the HOST number to form 40-bit
[rfc33.txt]:            control command to the distant NCP.  When the distant NCP
[rfc33.txt]:            responds positively, the connection is established and the
[rfc33.txt]:      where <port> and <AEN 1> are as above.  The NCP retains the ports
[rfc33.txt]:            and <AEN 1> and blocks the process.  When an RFC control
[rfc33.txt]:            command arrives naming the local socket, the process is
[rfc33.txt]:            unblocked and notified that a foreign process is calling.
[rfc33.txt]:            refuse the call or accept it and switch it to another
[rfc33.txt]:            command.
[rfc33.txt]:Control Commands
[rfc33.txt]:   A vocabulary of control commands has been defined for communication
[rfc33.txt]:   between Network Control Programs.  Each control command consists of
[rfc33.txt]:   parameters.  The number and format of parameters is fixed for each
[rfc33.txt]:   operation code.  A sequence of control commands destined for a
[rfc33.txt]:   This command is sent because a process has executed either an Init
[rfc33.txt]:   There is distinct advantage in using the same commands both to
[rfc33.txt]:   initiate a connection (Init) and to accept a call (Accept).  If the
[rfc33.txt]:   responding command were different from the initiating command, then
[rfc33.txt]:   two processes could call each other and become blocked waiting for
[rfc33.txt]:   each other to respond.  With this scheme, no deadlock occurs and it
[rfc33.txt]:   HOST receives this command, it may block the process generating the
[rfc33.txt]:   This command is also sent from the receiving HOST to the sending HOST
[rfc33.txt]:   and negates a previous CEASE.
[rfc33.txt]:   logger, and it is part of a special virtual net whose user number is
[rfc33.txt]:   numbered sockets, and returns a call to the socket numbered one less
[rfc33.txt]:   number 5 at UCLA) signs into UCLA, starts up one of his programs, and
[rfc33.txt]:   His process is blocked, and the NCP at UCLA sends
[rfc33.txt]:   The process at UCLA is unblocked and notified of the successful Init.
[rfc33.txt]:   and when unblocked
[rfc33.txt]:   UCLA process, and if satisfied, create a new process at SRI.  This
[rfc33.txt]:   new process will be tagged with user number X'010005', and both
[rfc33.txt]:   At the user level, subroutines which manage data buffer and format
[rfc33.txt]:   input designed for other HOSTs are provided.  It is not mandatory
[rfc33.txt]:   compilers and interpreters.  An example of a network-related
[rfc33.txt]:   to connect to Stanford Research Institute and appear as regular
[rfc33.txt]:      (ii)     The PDP-10 run command starts up the TELNET subsystem at
[rfc33.txt]:   analogous to the standard teletype user's state after dialing into a
[rfc33.txt]:   computer and making a connection but before typing anything.
[rfc33.txt]:      (v)      The user signs in to SRI with a standard login command.
[rfc33.txt]:               unaltered through the PDP-10 (user HOST) and on to the
[rfc33.txt]:      (vi) and (vii) The 940 subsystem, CAL, is started.
[rfc33.txt]:               by a command to his PDP-10 TELNET program, which sends
[rfc33.txt]:   established a shunt in the user HOST between the remote user and a
[rfc33.txt]:   HOST and a manual for the serving HOST, the network can be profitably
[rfc33.txt]:   is required between the user and a particular subsystem in a foreign
[rfc33.txt]:   operating systems overhead, and network transmission delays.  Unless
[rfc33.txt]:   consoles connected by telephone, and then this subsystem becomes
[rfc33.txt]:      1. Except for echoing and correction of mistyping, no action is
[rfc33.txt]:      2. All characters except "^", and "<-" and carriage returns are
[rfc33.txt]:      3. <- causes deletion of the immediately preceding character, and
[rfc33.txt]:         carriage return and line feed are echoed.
[rfc33.txt]:   is handled by a user level program in the local HOST before being
[rfc33.txt]:   would quickly implement rules 1 to 5 in a local HOST program and send
[rfc33.txt]:   solutions to these problems, but some observations and conjectures
[rfc33.txt]:   and most refresh display scopes will form another.  Furthermore, a
[rfc33.txt]:   standard devices.
[rfc33.txt]:   he has made a substantial request, and is therefore willing to wait
[rfc33.txt]:   local user level process intervenes between a local console and a
[rfc33.txt]:   foreign subsystem, and we may expect the response time for minor
[rfc33.txt]:   input, and controls computationally simple responses such as echoes.
[rfc33.txt]:   In the example above, the program to accumulate a line and generate
[rfc33.txt]:   compiled and executed.
[rfc33.txt]:         different connections, and because user input is not
[rfc33.txt]:         interconnection of programs would be specified at run time and
[rfc33.txt]:         program.  For example, if a network standard display controller
[rfc33.txt]:   NIL has not been fully specified, and reservations have been
[rfc33.txt]:   cost and a more substantial stay-at-home section.  If our conjecture
[rfc33.txt]:   pursuing.  Testing of this conjecture and further development of NIL
[rfc33.txt]:   The hardware and software interfaces between HOST and IMP is an area
[rfc33.txt]:   diversity of HOST computers to which a standard IMP must connect, the
[rfc33.txt]:   hardware interface was made bit serial and full-duplex.  Each HOST
[rfc33.txt]:   The software interface is equally simple and consists of messages
[rfc33.txt]:   passed back and forth between the IMP and HOST programs.  Special
[rfc33.txt]:   error and signal messages are defined as well as messages containing
[rfc33.txt]:   approaches one teletype character time and needlessly limits full-
[rfc33.txt]:   IMPs and wide band telephone lines have been operational for two
[rfc33.txt]:   SRI.  We thus have first hand experience that remote interaction is
[rfc33.txt]:   possible and is highly effective.
[rfc33.txt]:   one example, and interprocess communication is another.  Interprocess
[rfc33.txt]:   connections seems to be new, and we wonder whether this mechanism is
[rfc33.txt]:   Figure 4  The relationship between sockets and processes
[rfc33.txt]:   Figure 4 The relationship between sockets and processes
[rfc34.txt]:information available--absolute and relative.
[rfc34.txt]:referred to WWV, and that the oscillator drift rate will not account for
[rfc34.txt]:oscillator and clock are provided with standby power in order to
[rfc34.txt]:short-term accuracy will be about 10 to 20 microseconds and the long-
[rfc35.txt]:discovered.  Documentation will be available at the meeting and if not
[rfc36.txt]:   partly because of the complexity of reconnection and partly because I
[rfc36.txt]:   1.  Process PA in host A grabs socket SA and requests connection with
[rfc36.txt]:       and requests connection with socket SA.
[rfc36.txt]:       (RFC) command to host B.  NCPB in host B sends a similar command
[rfc36.txt]:       to host A.  No ordering is implied: NCPB may send the command to
[rfc36.txt]:       NCPA before or after receiving the command from NCPA.
[rfc36.txt]:   4.  NCPA and NCPB are both aware the connection is established when
[rfc36.txt]:       each has received a RFC command and each has received the RFNM
[rfc36.txt]:       for the one it has sent.  They then notify processes PA and PB,
[rfc36.txt]:   One of the rules adhered to is that either SA is a send socket and SB
[rfc36.txt]:   stated as "SA and SB must be  a send/receive pair."
[rfc36.txt]:   handling.  When a receiving host wishes to inhibit flow on a
[rfc36.txt]:   interprets this message as a RFNM and as a request to stop sending.
[rfc36.txt]:   A confirming control command is returned.
[rfc36.txt]:   When the receiving host is ready to receive again, it sends a command
[rfc36.txt]:   my way of thinking, and I have based the protocol design on the
[rfc36.txt]:   whether a socket is engaged in a connection, and if so, what state
[rfc36.txt]:   Input Link Table, and Output Link Table.)
[rfc36.txt]:         e)  flow state and buffer control
[rfc36.txt]:   The link is an 8 bit number and is the link over which data is sent
[rfc36.txt]:   Flow state and buffer control refer to checking for RFNM's sending
[rfc36.txt]:   and accepting cease, suspend and resume commands, and keeping track
[rfc36.txt]:   eight bit name of the other middle attached to the same process, and
[rfc36.txt]:   to record receipt of END and RDY commands.
[rfc36.txt]:   interpret RFNM's and RSM commands.
[rfc36.txt]:III   Control Commands
[rfc36.txt]:                          Command Summary
[rfc36.txt]:                               Commands
[rfc36.txt]:   Purpose:  This command is included for completeness and
[rfc36.txt]:            <my socket> and your socket must be a send/receive pair.
[rfc36.txt]:            <link> is included if and only if <my socket> is a
[rfc36.txt]:   Purpose:  This command is used to initiate a connection.  When
[rfc36.txt]:             two hosts have exchanged  RFC  commands with the same
[rfc36.txt]:            <my socket> and <your socket> are the same as for <RFC>
[rfc36.txt]:   Purpose:  This command is used to block a connection.  It may
[rfc36.txt]:   Purpose:  This command is sent by a receiving host to cause the
[rfc36.txt]:   Purpose:  This command is sent by a sending host to acknowledge
[rfc36.txt]:             Transmission will resume if a <RSM> command is
[rfc36.txt]:            <my socket> and <your socket> form a send/receive pair.
[rfc36.txt]:             NCP sends out two <FND> commands -- one in each direction.
[rfc36.txt]:             Upon receiving an <FND> command, the NCP checks its <your
[rfc36.txt]:             reconnection, the command is passed on with a new <my
[rfc36.txt]:             socket> and <your socket>.  However, before it is passed
[rfc36.txt]:             they are equal, a loop has been detected and both sockets
[rfc36.txt]:             marked as the end of a chain of reconnections and an <END>
[rfc36.txt]:             back and the <FND> is discarded.
[rfc36.txt]:   Purpose:  This command indicates which socket is at the end of a
[rfc36.txt]:             socket> and passed back to the other terminal socket
[rfc36.txt]:             send socket in the sending host and the receive socket
[rfc36.txt]:             socket in the receiving host and the receive socket in
[rfc36.txt]:             the transmission of this control command.)
[rfc36.txt]:   Purpose:  This command is sent from a send socket to a receive
[rfc36.txt]:             forwarded and that reconnection may occur.
[rfc36.txt]:   Purpose:  This command completes a reconnection.  It is sent from
[rfc36.txt]:             and transmission commences.
[rfc37.txt]:  BBN, Harvard, SRI, Utah, UCSB, SDC, RAND and UCLA.  I presented a
[rfc37.txt]:  The protocol based on sockets and undistinguished simplex
[rfc37.txt]:  time the limitations of a log-in requirement and the inability to
[rfc37.txt]:  widely accepted and that the criticism and discussion fell into two
[rfc37.txt]:  1.  Questioning the complexity and usefulness of the full protocol,
[rfc37.txt]:  and connections.  (Some have since surfaced.)  The following
[rfc37.txt]:  program which has an assigned location counter and an address space.
[rfc37.txt]:  Because a process may create another process, and because in general
[rfc37.txt]:  standard interface between processes.
[rfc37.txt]:  Wolfe (UCLA-CCN), Bill Crowther (BBN), and John Heafner and Erick
[rfc37.txt]:  Harslem (RAND).  Wolf's comments will appear as NWG/RFC #38 and fall
[rfc37.txt]:  reconnect".  They wait until there are no messages in transit and
[rfc37.txt]:  respond "OK".  He then says "Reconnect as follows" and they do it.
[rfc37.txt]:  instead of an "OK", then one must go and one must stop.  So treat a
[rfc37.txt]:  "reconnect" from a higher Host user etc. as an ok and from a lower
[rfc37.txt]:  as a "No-wait until I reconnect you" and do the connection.
[rfc37.txt]:  "Decouple connections and links.  Still establish connections, but
[rfc37.txt]:  use any handy link for the messages.  Don't send another message on
[rfc37.txt]:  a connection until a FRNM comes back.  Include source and
[rfc37.txt]:  follows...".  Hold onto the connect for a short time (seconds) and
[rfc37.txt]:  send both packets and connection messages along toward their
[rfc37.txt]:  or (after some thought) very different, and I am considering it.  I
[rfc37.txt]:  links.  An argument in favor of decoupling connections and links
[rfc37.txt]:  exceed 255, and that even if not, it is sounder practice to isolate
[rfc37.txt]:  dependancies in design.  On the other hand, the newly provided Cease
[rfc37.txt]:  In a conversation with John Haefner and Eric Harslem of RAND, the
[rfc37.txt]:  detection and reporting, status testing and reporting, and expansion
[rfc37.txt]:  and experimentation.  Error detection and status testing will
[rfc37.txt]:  require some extended discussion to see what is useful, and I expect
[rfc37.txt]:  Leaving room for protocol expansion and experimentation, however, is
[rfc37.txt]:  other area is to use command codes from 255 downward, with permanent
[rfc37.txt]:  time, and moreover, the network probably wouldn't handle traffic
[rfc37.txt]:  Some of Heafner's and Harslen's other ideas may appear in NWG/RFC
[rfc37.txt]:  refinement, implementation, extension, and utilization.  I may be
[rfc37.txt]:    proceedure is to use a host-to-host control command.
[rfc38.txt]:            store-and-forward IMP's are used by the network to effect
[rfc38.txt]:         b) When two hosts each have their own independent network and
[rfc38.txt]:         a) The END and RDY must specify relevant sockets in addition to
[rfc38.txt]:         b) Problems arise with the RSM and SPD commands. Should they
[rfc38.txt]:            these commands, it might be better to add another set of
[rfc38.txt]:            commands to block and unblock a connection, but I am not
[rfc38.txt]:            32 bits immediately after the header and before the marking.
[rfc39.txt]:        <ERR> <Code> <Command in error>
[rfc39.txt]:   There are three classes of errors--content errors, status errors, and
[rfc39.txt]:   resource allocation or exhaustion. <Code> specifies the class and the
[rfc39.txt]:   offending member of the class.  The command is returned to the
[rfc39.txt]:   sending NCP for identification and analysis.
[rfc39.txt]:   Examples of status errors are: messages sent over blocked links and
[rfc39.txt]:   closing of an unconnected link; and an attempt to unblock an
[rfc39.txt]:   non-existent program and connection table overflow, etc.  Resource
[rfc39.txt]:   The first command requests the remote NCP to supply the status of all
[rfc39.txt]:   This command supplements rather than replaces <CLS>.  It severs all
[rfc39.txt]:   communication between a program and those programs in a given HOST to
[rfc39.txt]:   which it is connected.  This command performs what would otherwise be
[rfc39.txt]:   handled by multiple <CLS> commands. <My Socket> contains the sender's
[rfc39.txt]:   These messages (HOST coming up and HOST voluntarily going down) are
[rfc39.txt]:   Unlike the previous commands, these are not sent over the control
[rfc39.txt]:   artificially imposed via the protocol (remote AEN assignment); and
[rfc39.txt]:   about complexity and resulting response times.  This is a difficult
[rfc39.txt]:   problem and it deserves more study after we have exercised the
[rfc4.txt]:   2a  From AT&T and/or BBN need dimensional, power and cabling
[rfc4.txt]:   2c  Need to establish location and drops on voice coordination
[rfc4.txt]:   2e  Need to order and install a.c. power (coordinate with 4b)
[rfc4.txt]:3  Design and construct host-Imp interface 9/1/69
[rfc4.txt]:   3e  Build and design hardware
[rfc4.txt]:   4a  from BBN get dimensional, power and cabling specifications
[rfc4.txt]:   4b  SRI orders and installs a.c. power (coordinate with 2e)
[rfc4.txt]:   5a  Get debug specifiations and procedures from BBN
[rfc4.txt]:       5b2  Test procedures for crash and recovery
[rfc4.txt]:       5b3  Check message fill and stripping procedures
[rfc4.txt]:   5d  Work out Imp reload and restart procedures
[rfc4.txt]:   6g  System response to invalid and abnormal conditions
[rfc4.txt]:   6h  Lose and restore facilities
[rfc4.txt]:       7d2  Design and build conference gear
[rfc4.txt]:       7d3  Deliver conference gear to UCLA and UCSB
[rfc4.txt]:   8c  Expand voice coordination scheme
[rfc4.txt]:       8c1  UTAH has access to UCLA and UCSB via SRI
[rfc4.txt]:       8c2  with BBN and ARPA
[rfc4.txt]:   9c  Login, logout, in and out of subsystems
[rfc4.txt]:   9d  Handling of error messages, crashes, recoveries
[rfc4.txt]:   9g  File storage and retrieval
[rfc4.txt]:   9k  Design and build comm exec or its equivalent
[rfc40.txt]:We have recently discussed NWG/RFC Nos. 36 and 39 with Steve Crocker,
[rfc40.txt]:UCLA.  Steve has asked that we elaborate on the errors, queries, and
[rfc40.txt]:     <ERR> <Code> <Command length> <Command in error>
[rfc40.txt]:assigned codes are shown below.  <Command length> is a 16-bit integer
[rfc40.txt]:that indicates the length of the <Command in error> in bits.  The
[rfc40.txt]:<Command in error> is the spurious command.
[rfc40.txt]:         20         Unknown command code.
[rfc40.txt]:The <QRY> is the query indicated in NWG/RFC #39 and <RPY> is the reply.
[rfc40.txt]:                                       <flow state and buffer control>
[rfc41.txt]:know the time and date of the message.
[rfc41.txt]:now span all time zones of the U.S. and do not have direct voice
[rfc41.txt]:        The transmitting IMP site should use 24 hour time and include
[rfc42.txt]:   both the syntax and semantics of messages.  However, even before such
[rfc42.txt]:   specification is by means of a message type which both sender and
[rfc42.txt]:   which initially put in and test and remove the type information from
[rfc42.txt]:   the message.  Let us call these two programs X and Y, for lack of
[rfc42.txt]:   better names.  In general, X and Y will perform transformations on
[rfc42.txt]:   usage grows, X and Y might become table driven with the table
[rfc42.txt]:   Standard Types and Local Types:
[rfc42.txt]:   standard and local.
[rfc42.txt]:   transformation between every possible data representation and the
[rfc42.txt]:   data representation of the machine they are running on, and also
[rfc42.txt]:   standard types.
[rfc42.txt]:   There are two classes of local types: MYLOCAL and YOURLOCAL. A
[rfc42.txt]:   A possible implementation of standard and local types is to define
[rfc42.txt]:   standard type 0 to be YOURLOCAL and standard type 1 to be MYLOCAL. In
[rfc42.txt]:   are unchanged and unchecked.  Installations would define their own
[rfc42.txt]:   local type numbers and these would normally be available from the
[rfc42.txt]:   be type 0, n and all messages received from currently running
[rfc42.txt]:   Examples of Possible Standard Types:
[rfc42.txt]:               future, the X and Y transformation boxes are table
[rfc42.txt]:        7.     Network standard graphics message.
[rfc43.txt]:the I/O handlers and the display structures.
[rfc43.txt]:      A discussion of the problems of handling interactive programs
[rfc43.txt]:      This conference is intended as a working group and each host
[rfc43.txt]:      Anyone interested in attending and/or receiving the documents
[rfc44.txt]:                                                            A. Landsberg
[rfc44.txt]:                     Comments on NWG/RFC 33 and 36
[rfc44.txt]:        that accepts calls for connections on a particular socket, and
[rfc44.txt]:     a) Reconnection in Case 1 is necessary and useful, while the
[rfc44.txt]:        2 involves an elaborate mechanism of commands because of the
[rfc44.txt]:        asynchronous nature of the network (four out of nine commands
[rfc44.txt]:        were suggested to handle Case 2 in RFC #36).
[rfc44.txt]:     system call (not a command) is therefore needed to permit Case 1,
[rfc44.txt]:   II.  The CLOSE command as suggested in RFC #36 seems to be used for
[rfc44.txt]:        two purposes: block a connection and abort a connection.  To
[rfc44.txt]:        avoid ambiguity it would be desirable to have two commands:
[rfc44.txt]:        BLOCK and CLOSE.  As suggested in RFC #36, the response for both
[rfc44.txt]:        commands can be the SUSPEND command which acknowledges the
[rfc44.txt]:        reception of BLOCK or CLOSE commands.
[rfc44.txt]:        the foreign Host and a foreign socket number, we can use the
[rfc44.txt]:        link number in the commands.  Thus, except for the RFC command,
[rfc44.txt]:        all commands can use link numbers and therefore eliminate a 40-
[rfc44.txt]:        for some user and a socket, then ports are completely redundant.
[rfc44.txt]:   version the following system calls and commands will be used (most of
[rfc44.txt]:   them in RFC 33 and 36).
[rfc44.txt]:   Commands:
[rfc44.txt]:   Commands 0, 1, 3, 4 as in RFC #36 (pp.5) and in addition:
[rfc44.txt]:        express their preferences and decide accordingly).  All of these
[rfc44.txt]:              by shifting their messages (when necessary) and adjusting
[rfc44.txt]:           conversion in the IMPs may slow them down and take up space
[rfc44.txt]:           are in the same code and only one conversion table is needed.
[rfc44.txt]:           suggest adopting a Network Common Code (NCC), and use all of
[rfc44.txt]:           of a message (and adjusting the "marking" accordingly) rather
[rfc44.txt]:           Initially, ASCII-8 can be used, and then expanded according
[rfc45.txt]:April 29 document, and for everyone to exchange gripes, suggestions
[rfc45.txt]:and schedules.
[rfc46.txt]:   The attached document contains comments and suggestions of the
[rfc46.txt]:   outlined in NWG/RFC 33, 36, and later documents.
[rfc46.txt]:   modifications and extensions to the protocol specified by Carr,
[rfc46.txt]:   Crocker, and Cerf in a preprint of their 1970 SJCC paper and extended
[rfc46.txt]:   intended to be an indication of the type and extent of the protocol
[rfc46.txt]:   a slightly modified subset of the network commands specified in
[rfc46.txt]:   NWG/RFC36 plus the ERR command as specified by Harslem and Heafner in
[rfc46.txt]:   network and talking to each other at the earliest possible date, we
[rfc46.txt]:   elicit the broadest possible support and to be easily implementable
[rfc46.txt]:   accepted and implemented by all installations are likely to prove
[rfc46.txt]:   initial protocol open-ended and flexible.  A simple basic protocol is
[rfc46.txt]:   2. A standard way for a process to connect to the logger (logging
[rfc46.txt]:      process at a HOST) at a foreign HOST and request the creation of a
[rfc46.txt]:      user process.  (The login ritual may or may not be standardized.)
[rfc46.txt]:   3. A standard way for a newly created process to initiate pseudo-
[rfc46.txt]:   Crocker, and Cerf and this proposal are the following:
[rfc46.txt]:   3. The following NCP commands have been added:
[rfc46.txt]:      a. The ERR command specified in NWG/RFC 40 is included.
[rfc46.txt]:      b. BLK and RSM commands are presented as possible alternatives to
[rfc46.txt]:         the "cease on link" IMP command and SPD and RSM commands set
[rfc46.txt]:         forth in NWG/RFC 36.  Because these commands operate on socket
[rfc46.txt]:      c. An INT command that interrupts a process is specified.  We feel
[rfc46.txt]:         blocked when the interrupt is needed, and the NCP must scan
[rfc46.txt]:      d. An ECO echoing command to test communications between NCPs is
[rfc46.txt]:   4. Sockets are conceptualized as having several states, and these are
[rfc46.txt]:   5. The protocol regarding creation of a foreign process and
[rfc46.txt]:      communication with it is removed to a separate User Control and
[rfc46.txt]:      Communication (UCC) protocol level and is more fully specified.
[rfc46.txt]:   It seems convenient and useful to view the network as consisting of a
[rfc46.txt]:   hierarchy of protocol and implementation levels.  In addition to
[rfc46.txt]:   aiding independent software and hardware development, provisions for
[rfc46.txt]:   a layered protocol allow additions and substitution of certain levels
[rfc46.txt]:   three systems of increasing generality and decreasing privilege
[rfc46.txt]:   1. IMP Network - The network of IMPs and physical communication lines
[rfc46.txt]:      communications between its HOST and the IMP network.  It acts as a
[rfc46.txt]:   3. User Control and Communication Module - The preceding two
[rfc46.txt]:      the foreign HOST's logger.  The User Control and Communication
[rfc46.txt]:      communicate with a foreign HOST's logger and to make initial
[rfc46.txt]:   paths, and (ii) a system for coordinating the distributed NCP system
[rfc46.txt]:   process and a receive socket attached to another process.  Sockets
[rfc46.txt]:      d. Socket Code (8 bits) - This code provides for 128 send and 128
[rfc46.txt]:   socket, and they do not generate entries in the event queue.
[rfc46.txt]:   should be discarded and the sending NCP notified (via ERR command
[rfc46.txt]:   The NCP network coordinates its activities through control commands
[rfc46.txt]:   passed between its individual components.  These commands generally
[rfc46.txt]:   concern the creation and manipulation of socket connections
[rfc46.txt]:   controlled by the NCP receiving the command.  A control command is
[rfc46.txt]:   between these messages and regular data messages implementing
[rfc46.txt]:      The following NCP control commands are defined:
[rfc46.txt]:      An NCP directs this command to a foreign NCP to attempt to
[rfc46.txt]:      initiate a connection between a local socket and a foreign socket.
[rfc46.txt]:      rejects connection by issuing the CLS command (see below).  An RFC
[rfc46.txt]:      An NCP issues this network command to disconnect an existing
[rfc46.txt]:      that the CLS command may reach the foreign NCP prior to the last
[rfc46.txt]:      adhering to two standards: (i) A CLS command for a local send
[rfc46.txt]:      the foreign socket comes back, and (ii) the foreign NCP processes
[rfc46.txt]:      messages are coming in and thus the NCP's buffers may tend to clog
[rfc46.txt]:      up.  The NCP issues this command to a foreign NCP to block further
[rfc46.txt]:      An NCP issues this command to unblock a previously blocked
[rfc46.txt]:      execution and execute some standard procedure.  That procedure is
[rfc46.txt]:      f. Report an Erroneous Command to a Foreign NCP
[rfc46.txt]:         ERR <code> <command length> <command in error>
[rfc46.txt]:      This command is used to report spurious network commands or
[rfc46.txt]:      command.  <code> specifies the error type.  If <code> specifies an
[rfc46.txt]:      erroneous network command, <command in error> is that command (not
[rfc46.txt]:      including IMP header) and <command length> is an integer
[rfc46.txt]:      message, <command in error> contains only the link number over
[rfc46.txt]:      g. Network Test Command
[rfc46.txt]:      An NCP may test the quality of communications between it and a
[rfc46.txt]:      foreign NCP by directing to it an ECO command with an arbitrary
[rfc46.txt]:      <48 bit code> (of the same length as a socket identifier) and
[rfc46.txt]:      <echo switch> 'on'.  An NCP receiving such a ECO command should
[rfc46.txt]:      and <echo switch> 'off' to the originating NCP.  An NCP does not
[rfc46.txt]:      command will be of considerable aid in the initial shakedown of
[rfc46.txt]:      h. No Operation Command
[rfc46.txt]:      An NCP discards this command upon receipt.
[rfc46.txt]:   functions and no illegal privileges.  Examples of such illegal
[rfc46.txt]:   to send out spurious network commands or messages.
[rfc46.txt]:   We outline here an interface based on the Carr, Crocker, and Cerf
[rfc46.txt]:      An acknowledging RFC is sent to the accepted foreign socket, and
[rfc46.txt]:      denies connection by sending out a CLS command and deleting the
[rfc46.txt]:      The NCP sends out a CLS command and deletes the "request" event
[rfc46.txt]:      this socket and to deactivate the socket.  The NCP sends out a CLS
[rfc46.txt]:      command to the foreign socket if a connection has existed.  The
[rfc46.txt]:      The user directs the NCP to send out an INT command to the foreign
[rfc46.txt]:      IMP messages of maximum length 8095 bits and transmitted to the
[rfc46.txt]:      connection, and messages can now flow.
[rfc46.txt]:     FIG 2.  Establishing and Communicating over a Socket Connection
[rfc46.txt]:      connection.  NCP B formats this into an IMP message and sends it
[rfc46.txt]:      recipient is, and stores the message in a buffer for the recipient
[rfc46.txt]:      rate than process 'a' picks it up, NCP A can issue a BLK command
[rfc46.txt]:      command.
[rfc46.txt]:      a. Process 'b' decides to close the connection, and it issues the
[rfc46.txt]:      command to NCP A.  When the RFNM from the CLS command message
[rfc46.txt]:      close at its end and deactivating 'Bb9'.
[rfc46.txt]:      from B, NCP A marks socket 'Aa12' as "close pending" and places a
[rfc46.txt]:      inform 'a' of the closure, and socket 'Aa12' is flushed from the
[rfc46.txt]:      a. Let us return to step 2. and assume that process 'a' wants to
[rfc46.txt]:      NCP A immediately sends out a CLS command to NCP B and marks
[rfc46.txt]:      NCP A and be discarded without error comments, NCP A retains
[rfc46.txt]:      the RFNM from the CLS command.  During this period NCP A discards
[rfc46.txt]:      connection and deactivating 'Aa12'.  Further messages to socket
[rfc46.txt]:      'Aa12' result in NCP A sending an ERR "erroneous command" to the
[rfc46.txt]:      c. When NCP B receives the CLS command, socket 'Bb9' is marked as
[rfc46.txt]:      "close pending", and the CLS event is placed into the event queue
[rfc46.txt]:      and socket 'Bb9' is removed from NCP B's tables.
[rfc46.txt]:   network and create a process for him upon proper identification.
[rfc46.txt]:   This process is called the logger and interacts through the NCP via
[rfc46.txt]:   the network-related User Control and Communication (UCC) module,
[rfc46.txt]:   typewriter connections:  one to the foreign logger, and one to the
[rfc46.txt]:   to identify the requestor process to the logger, and after login to
[rfc46.txt]:   and when it needs to regain control.  This is at the modest expense
[rfc46.txt]:   calling, and by protocol, on which requestor socket pair the UCC is
[rfc46.txt]:   to communicate with the requestor process, and which requestor socket
[rfc46.txt]:Establishing and Operating a Remote Process
[rfc46.txt]:   instance tag = 0 open (active and unconnected) as a "signal" socket,
[rfc46.txt]:   and periodically checks for INITs to this socket.  Processes wishing
[rfc46.txt]:   <base_socket+2> and <base_socket+3> receive/send pair over which it
[rfc46.txt]:   <base_socket> and <base_socket+1>.  (The created process will INIT
[rfc46.txt]:   <base_socket+2> and <base_socket+3> on which the requestor process is
[rfc46.txt]:   STATUS <base_socket+3> and returns when the INIT for that socket
[rfc46.txt]:   reaches it.  It does a similar verify and ACCEPT.  (There is an
[rfc46.txt]:   connection is maintained during the login ritual and throughout the
[rfc46.txt]:   UCC, the UCC abandons the connection attempt.
[rfc46.txt]:   UCC.  (The initial protocol might standardize the login ritual.)  If
[rfc46.txt]:   the logger is not satisfied and wishes to cut off the requestor, the
[rfc46.txt]:   UCC module CLOSEs both <base_socket+2> and <base_socket+3>, perhaps
[rfc46.txt]:   requestor's <base_socket> and <base_socket+1>.  If both requests are
[rfc46.txt]:   connection.  Then it goes to command level, in which it awaits a
[rfc46.txt]:   typewriter command message over the connection.  If the created
[rfc46.txt]:   and other processes, and to deactivate all open sockets of the dead
[rfc46.txt]:   then CLOSEs the dual connections between it and the requestor
[rfc46.txt]:   8. The INTERRUPT call has a standard "quit" meaning when sent from a
[rfc46.txt]:   aborted, and the it enters "command level" where it awaits a command
[rfc46.txt]:   interrupted processing is resumable by issuing a "start" command to
[rfc46.txt]:   more restrictive than that implemented by the INT NCP command.)
[rfc46.txt]:      command.  A source file consisting of intermixed text and "runoff"
[rfc46.txt]:      then compiled by the "runoff" command to produce a finished copy.
[rfc46.txt]:      <base_socket+2> and
[rfc46.txt]:                                                   and REJECT connection
[rfc46.txt]:      <base_socket> and                            pair to the requestor's
[rfc46.txt]:      <base_socket_1> to be                       <base_socket+2> and
[rfc46.txt]:                                                   <base_socket> and
[rfc47.txt]:standing, we found the comments particularly useful and decided to share
[rfc47.txt]:otherwise an excellent paper.  Both concern a misunderstanding of the
[rfc47.txt]:nature of the IMP as a communications device, and in particular the
[rfc47.txt]:waits in buffers for substantial lengths of times, and then emerges at
[rfc47.txt]:buffering is minimal, and devoted to error control and momentary traffic
[rfc47.txt]:phone line, and no buffering occurs at all.
[rfc47.txt]:In fact we cannot achieve this, and therefore have included buffering to
[rfc47.txt]:handle traffic surges.  These buffers are useless for their intended
[rfc47.txt]:The two specific errors occur on pages 5 and 23.  On page 5 the authors
[rfc47.txt]:multiple links to achieve a wide band."  In fact one of the primary
[rfc47.txt]:purposes of links is to achieve a wider band.
[rfc47.txt]:We wish to allow as much band width as possible.  Our troubles occur not
[rfc47.txt]:with wide band but with an imbalance of input and output.  The authors
[rfc47.txt]:randomly related.  The statistics are all in our favor and we have
[rfc47.txt]:the non-random coincidences, and we have taken special precautions
[rfc47.txt]:all kinds of users, and protect ourselves accordingly.
[rfc47.txt]:On pages 23 and 24 there are 4 critical sentences which imply that the
[rfc47.txt]:Host to accept these messages, because our ability to handle traffic
[rfc47.txt]:surges is now below standard.  At present we allow three full
[rfc47.txt]:But if buffering is needed why not get more memory and do it in the IMP?
[rfc47.txt]:needed at all in some places, and is better done where the extra memory
[rfc47.txt]:           "   4 sentences 1 and 2 (80ms is hardware screw adjustable)
[rfc48.txt]:   March 17, 1970 and, as promised, are reporting our results.
[rfc48.txt]:   all quarters and have formed preferences about each of these.  In
[rfc48.txt]:   Second, we have tried to formalize the protocol and algorithms for
[rfc48.txt]:   incomplete but have led to a better understanding.  We include here,
[rfc48.txt]:   our assumptions about the environment of the NCP and in Section IV
[rfc48.txt]:II. Issues and Preferences
[rfc48.txt]:   have been raised in recent NWG/RFC's and in private conversations,
[rfc48.txt]:   and for each issue, we suggest an answer or policy.  In many cases,
[rfc48.txt]:         out a message to an Imp word boundary and yet preserve the
[rfc48.txt]:         the sending Host wants to send an irregular length message and
[rfc48.txt]:         1.  BBN rejected the change because of an understandably strong
[rfc48.txt]:         hardware to signal message end, and not to depend upon the Host
[rfc48.txt]:         padding", whereby the sending Host supplies 10* and the network
[rfc48.txt]:         the leader and the text of a message.  The original intent of
[rfc48.txt]:         use the marking to expand a message so that it _ends_ on a word
[rfc48.txt]:         machines, this is convenient and marking is not, while for
[rfc48.txt]:         adjusting the marking does not cause them any problems, and
[rfc48.txt]:         used and that marking be used to adjust the length of a
[rfc48.txt]:         A much prettier (and more expensive) arrangement was suggested
[rfc48.txt]:         by W. Sutherland.  He suggested that the Host/Imp interfaces be
[rfc48.txt]:         smart enough to strip padding or marking and might even parse
[rfc48.txt]:         After considering connections and their uses for a while, we
[rfc48.txt]:         literature, and what mechanisms are in use.  The formalisms are
[rfc48.txt]:         interesting because they lead to uniform implementations and
[rfc48.txt]:         because they point out which problems need solving and
[rfc48.txt]:         creating a job, and the mechanisms for passing a console around
[rfc48.txt]:         idiosyncratic and distinct from all other structures and
[rfc48.txt]:         portion of their address spaces and cooperatively wake up each
[rfc48.txt]:         other.  Semaphores and event channels are handy extensions of
[rfc48.txt]:         efficiency and capacity of event channels are inversely
[rfc48.txt]:         process with a mapping from device and file names to other
[rfc48.txt]:         device and file names.  Consoles have nearly the same semantics
[rfc48.txt]:         The similarity between network connections and existing
[rfc48.txt]:         using the network.  Moreover, the structure is clean enough and
[rfc48.txt]:            1. What outstanding problems does it solve?
[rfc48.txt]:         In the case of network connections, the candidates for the
[rfc48.txt]:         printers and card readers, and the modeling of their buffering
[rfc48.txt]:         connection formalism to the dial-in and login procedures, we
[rfc48.txt]:         reconnection, and an extremely mild form is presented in an
[rfc48.txt]:         only the substitution of AEN's, and even then only at the time
[rfc48.txt]:         the logger.  The logger answers calls, screens users, and
[rfc48.txt]:         creates jobs and processes.  One of the features of most
[rfc48.txt]:         numbers and a rotary answering system.  In our quest for
[rfc48.txt]:         be able to call a single advertised number and get connected to
[rfc48.txt]:         flow between the user and the logger has already commenced, so
[rfc48.txt]:         network and which passes connections from one socket to another
[rfc48.txt]:         more sophisticated telephone systems, to standard facilities of
[rfc48.txt]:         telephone company operators, and to distributed private
[rfc48.txt]:         pretty and (perhaps ipso facto) useful, or it was complex and
[rfc48.txt]:         far more evident to us, and we were put into the defensive
[rfc48.txt]:            2. useful for login and console passing
[rfc48.txt]:         login, sockets of the form <U,H,O> and <U,H,1> are the input
[rfc48.txt]:         and output sockets respectively of a copy of the logger or, if
[rfc48.txt]:         connection to <U,H,O> and <U,H,1>.  If user U is not in use, a
[rfc48.txt]:         copy of the logger will respond and interrogate the caller.  If
[rfc48.txt]:         The logger may demand that the caller be from the same virtual
[rfc48.txt]:         it may demand that the user supply a password matched to user
[rfc48.txt]:         id U, or it may demand both.  Some systems may even choose to
[rfc48.txt]:         After login, AEN's 0 and 1 remain the console AEN's.  Each
[rfc48.txt]:         system presumably has mechanisms for passing the console, and
[rfc48.txt]:         these would be extended to know about AEN's 0 and 1 for network
[rfc48.txt]:         sockets to ports, and happens within the Host and without the
[rfc48.txt]:         In conversations with Meyer and Skinner after NWG/RFC #46 was
[rfc48.txt]:         Meyer's and ours in section above.  Their new scheme seemed a
[rfc48.txt]:         little better and we look forward to their next note.
[rfc48.txt]:         about particular logins schemes; all seem ok and none impress
[rfc48.txt]:         procedures.  This is because the text sequences and interrupt
[rfc48.txt]:         following, say, our scheme on our system and Meyer's on Multics
[rfc48.txt]:         initial protocol, and we will offer it later as an optional and
[rfc48.txt]:         useful and will provide a unifying framework for currently ad
[rfc48.txt]:      C. Decoupling Connections and Links
[rfc48.txt]:         Bill Crowther (BBN) and Steve Wolfe (UCLA) independently have
[rfc48.txt]:         of the text of the message and then send messages over any
[rfc48.txt]:         We discussed this question a little in NWG/RFC #37, and feel
[rfc48.txt]:         emphasis on simplicity, speed and small core requirements, it
[rfc48.txt]:         seems more efficient to leave links and connections coupled.
[rfc48.txt]:         As mentioned by J. Heafner and E. Harslem of RAND, it is
[rfc48.txt]:         The specific formulation of the error command given by Heafner
[rfc48.txt]:         and Harslem in NWG/RFC #40 and by Meyer in NWG/RFC #46 seems
[rfc48.txt]:         reasonable and we recommend its adoption.  Some comments are in
[rfc48.txt]:         A distinction should be made between resource errors and other
[rfc48.txt]:         overload conditions.  Overload conditions are well-defined and
[rfc48.txt]:         errors should not be handled with error mechanisms, but with
[rfc48.txt]:         mechanisms specific to the problem.  Thus the <CLS> command may
[rfc48.txt]:         Flow control protocol is designed solely to handle buffering
[rfc48.txt]:         of the <ERR> command is to the recipient.  Presumably his NCP
[rfc48.txt]:         is broken, and it may only aggravate the problem to bombard it
[rfc48.txt]:         with error commands.  We therefore, recommend that error
[rfc48.txt]:         chronological file and that <ERR> commands received likewise be
[rfc48.txt]:         errors.  We have watched the BBN staff debug and test the IMP
[rfc48.txt]:         program, and it seemed that most of the errors affected timing
[rfc48.txt]:         and throughput rather than validity.  Hence most errors will
[rfc48.txt]:         probably arise from broken Hosts and/or buggy NCP's.
[rfc48.txt]:      E. Status Testing and Reporting
[rfc48.txt]:         that processing of status requests and generating of status
[rfc48.txt]:         "request status" and "status is" commands.  The form follows
[rfc48.txt]:         Meyer's <ECO> command is easily implemented and serves the more
[rfc48.txt]:         suggest that the length of the <ECO> command be variable, as
[rfc48.txt]:         unclear, so we recommend a pair of commands:
[rfc48.txt]:         and
[rfc48.txt]:         Upon receipt of an <ECO> command the NCP would echo with the
[rfc48.txt]:         <ERP> command.
[rfc48.txt]:      F. Expansion and Experimentation
[rfc48.txt]:         even each user).  The first level is well-specified by BBN, and
[rfc48.txt]:         neutral and simple as possible, and in particular we agree that
[rfc48.txt]:         Simplicity and foresight notwithstanding, there will arise
[rfc48.txt]:         experimented with.  In order to provide for experimentation and
[rfc48.txt]:         suggested that link 255 be used for status requests and
[rfc48.txt]:         replies, and this is in consonance with our view of the
[rfc48.txt]:         We also recommend that control command prefixes from 255
[rfc48.txt]:         Wolfe in NWG/RFC #38 and Shoshani et al in NWG/RFC #44 suggest
[rfc48.txt]:         socket.  While all of our diagrams and prototypical system
[rfc48.txt]:         and ports, it is strictly a matter of local implementation.  We
[rfc48.txt]:         intended to be suggestive only, and should be ignored if no
[rfc48.txt]:      H. Echoing, Interrupts and Code Conversion
[rfc48.txt]:            interpret it as an interrupt signal.  Tom Skinner and Ed
[rfc48.txt]:            Meyer of MIT inform us that model 37 TTY's and IBM 2741
[rfc48.txt]:            detected by the I/O channel hardware and passed to the
[rfc48.txt]:            character -- it has no ASCII code and cannot be program
[rfc48.txt]:            simulating console interrupts and rejected the <INT> type
[rfc48.txt]:            command because it didn't correctly model any system we
[rfc48.txt]:            knew.  We now reverse our position and recommend the
[rfc48.txt]:            implementation of an INTERRUPT system call and an <INT>
[rfc48.txt]:            control command as suggested by Meyer in NWG/RFC #46.
[rfc48.txt]:            conventions, and if an <INT> arrives for a connection on
[rfc48.txt]:            which it shouldn't the <INT> should be discarded and
[rfc48.txt]:         2. Echoing and Code Conversion
[rfc48.txt]:            echoing policy and that code conversion should be done by
[rfc48.txt]:            the using process.  Standardization in this area should
[rfc48.txt]:         Heafner and Harslem suggest in NWG/RFC #39 a broadcast
[rfc48.txt]:         facility, i.e. <TER> and <BDC>.  We do not fully understand the
[rfc48.txt]:         value of this facility and are thus disposed against it.  We
[rfc48.txt]:         suspect that we would understand its value better if we had
[rfc48.txt]:         statement on the relationship between OS/360 and the concepts
[rfc48.txt]:         and assumptions underlying the network protocol.
[rfc48.txt]:         a formal and as a practical matter it is of concern only within
[rfc48.txt]:         the basic philosophy of sockets and connections.  Presently we
[rfc48.txt]:         number_, and are similarly unhappy with Meyer's _socket_code_.
[rfc48.txt]:         and we solicit suggestions.
[rfc48.txt]:   may be more than one process with the same user number, and if so,
[rfc48.txt]:   to one of its ports.  Sockets are identified by user number, host and
[rfc48.txt]:   AEN, and a socket is local to a process if their user numbers match
[rfc48.txt]:   and they are in the same host.  A process need only specify an AEN
[rfc48.txt]:   Each port has a status which is modified by system calls and by
[rfc48.txt]:   and the implementation suggested by section IV is in no way binding.
[rfc48.txt]:   provide clues as to what the implementation difficulties might be and
[rfc48.txt]:   sockets as valid and queue them.  If desired, an NCP may reject them,
[rfc48.txt]:   as Meyer suggests, or it might hold them for awhile and reject them
[rfc48.txt]:        arg  etc. are the parameters supplied with the call, and
[rfc48.txt]:               process and host number of this host are implicit.
[rfc48.txt]:   P and to initiate a connection with socket FS.  Possible returned
[rfc48.txt]:        C = ok      The Init was legal and the socket FS is being
[rfc48.txt]:        C = homosex The AEN and FS were either both send or both receive
[rfc48.txt]:   call comes in, a connection will be established and the process
[rfc48.txt]:   Any activity is stopped, and the port becomes free for other use.
[rfc48.txt]:        C = not open     if no connection is currently open and
[rfc48.txt]:   tables, some queues and buffers, and a link assignment table.  Each
[rfc48.txt]:      1. The Input Handler
[rfc48.txt]:         to-Host transmission into a resident buffer and wakes up the
[rfc48.txt]:      2. The Output Handler
[rfc48.txt]:         Host-to-Imp transmission out of a resident buffer and wakes up
[rfc48.txt]:         Output Scheduler selects the highest priority message and
[rfc48.txt]:         gives it to the Output Handler.
[rfc48.txt]:   The two interesting components are the Input Interpreter and the
[rfc48.txt]:   Interpreter services foreign requests and the System Call Interpreter
[rfc48.txt]:   lookup routine which is presented with a key and either returns
[rfc48.txt]:         "Requests-for-connection" and other attributes of a
[rfc48.txt]:            The Input Interpreter uses the foreign host and link as a
[rfc48.txt]:   Program.  Boxes represent tables and Buffers, boxes with angled
[rfc48.txt]:   corners and a double bottom represent Queues, and jagged boxes
[rfc48.txt]:   OCCQ  - Output Control Command Queue
[rfc48.txt]:   IHBuf - Buffer filled by the Input Handler from the IMP and
[rfc48.txt]:           by the Output Scheduler and emptied by the Output
[rfc48.txt]:           Handler.
[rfc48.txt]:    |   \   Handler  /                      \   Handler  / <----+    |
[rfc48.txt]:   [ into the online RFC archives by Donald and Jill Eastlake 1999 ]
[rfc48.txt]:[Editor's note: The original hand-drawn diagram represented
[rfc48.txt]:Queues by cylinders and component programs by "squishy ameoba
[rfc49.txt]:   (Both my personal opinions and those that I believe represent a
[rfc49.txt]:   here.  The pronouns "I" and "we" are used to distinguish between
[rfc49.txt]:On April 21 and 23 Thomas P. Skinner and I had telephone conversations
[rfc49.txt]:2) Steve supported the implementation of the INT network command
[rfc49.txt]:This command allows a process that has agreed to accept interrupts over
[rfc49.txt]:and execute a procedure that it has specified as the INT handler.  (The
[rfc49.txt]:NCP does not specify the INT handler.  That is the function of higher
[rfc49.txt]:The INT command is designed specifically for use by a third level User
[rfc49.txt]:Control and Communication (UCC) protocol to implement a "quit" signal.
[rfc49.txt]:Under such a protocol, both the requestor and the created process agree
[rfc49.txt]:that an INT related to a specific socket connection and transmitted over
[rfc49.txt]:the NCP control link to the created process is the standard "quit"
[rfc49.txt]:signal.  The created process provides an INT handler that implements
[rfc49.txt]:Teletype input stream, systems such as CTSS, Multics, and others
[rfc49.txt]:the second is impossible).  I put forth several reasons why (and I think
[rfc49.txt]:identifier and reserving a null field in the identifier for future
[rfc49.txt]:and he can't easily find out.
[rfc49.txt]:4) We all (Steve and MAC) seem to agree that at the NCP level there
[rfc49.txt]:specification at the NCP level would delay agreement on the protocol and
[rfc49.txt]:standard character set, we prefer ASCII.  After all, it is the prefered
[rfc49.txt]:standard of our sponsoring organization.)
[rfc49.txt]:5) Shoshani, Long, and Landsberg also state (RFC 33) that they prefer to
[rfc49.txt]:automatically rejected via the CLS command.  Steve proposes that RFCs to
[rfc49.txt]:rejected.  This scheme allows certain types of network command
[rfc49.txt]:7) Steve, Tom, and I discussed strategies for a User Control and
[rfc49.txt]:connections to the requestor process and switching between them.
[rfc49.txt]:user process at a foreign HOST issues RFCs to sockets 0 and 1 belonging
[rfc49.txt]:HOST's logger process.  The logger accepts connection and performs the
[rfc49.txt]:login ritual.  If successful, the logger creates a user process and lets
[rfc49.txt]:Tom and I objected to this because it introduces UCC protocol into the
[rfc49.txt]:NCP level.  (The NCP must direct all RFCs to inactive sockets 0 and 1 to
[rfc49.txt]:two sockets of the process to be created to the requestor's sockets, and
[rfc49.txt]:conducts the login ritual through these.  Steve liked this and suggested
[rfc49.txt]:(a) If the control sockets at a created process are limited to 0 and 1,
[rfc49.txt]:and turn off the imposter, but this is an aggravating security breach.
[rfc49.txt]:the sockets and prevent access to a rightful user.  A better solution is
[rfc49.txt]:(b) A disadvantage of both Crocker's and the combined UCC is that the
[rfc49.txt]:user and then determine the user code for his socket identifiers.
[rfc49.txt]:the requestor and created processes should have the same user code so
[rfc49.txt]:foreign process and another local process.
[rfc49.txt]:and switch between two full-duplex connections.  I don't see this as a
[rfc49.txt]:Steve expressed the thought that there need not be an initial standard
[rfc49.txt]:all to talk to each other, and not between limited subsets of HOSTs
[rfc49.txt]:within the network, there must be an initial standard UCC which
[rfc49.txt]:agreeable to it, and will provide one set of software so that a
[rfc49.txt]:implementing a non-standard UCC just so we can talk to ourselves.  We
[rfc49.txt]:we can log in to all HOSTs using this protocol, and that users at all
[rfc5.txt]:      feedback, and packing the resulting information into message 
[rfc5.txt]:      and accepting message packets from another computer, unpacking
[rfc5.txt]:      them, building trees of display information, and sending other
[rfc5.txt]:      It was generally agreed beforehand that the runmning of interactive
[rfc5.txt]:      DEL programs, and lists of proposed semantic capability.
[rfc5.txt]:      At the meeting were Andrews, Baray, Carr, Crocker, Rulifson, and
[rfc5.txt]:      and Stoughton meet with Rulifson at SRI on Decembeer 12, 1968.  It
[rfc5.txt]:      And the DEL 1 program becomes merely a message builder and
[rfc5.txt]:      and on appropriate break characters send the messages.
[rfc5.txt]:      translate them to the user-host character set and print them on
[rfc5.txt]:      impossible to model with echo table, and thus a user program
[rfc5.txt]:         This puts an unnecessarily large load on a TSS, and if the
[rfc5.txt]:         run on the user-host.  It will handle all the immediate
[rfc5.txt]:         button pushes, message will be sent to the server-host and
[rfc5.txt]:      One of the more difficult, and often neglected, problems is the
[rfc5.txt]:      effective simulation of one nonstandard console on another non-
[rfc5.txt]:      standard console.
[rfc5.txt]:         Interfaces between this program and the input stream may
[rfc5.txt]:   AHI system and wants to run NLS.
[rfc5.txt]:      Representation and translates it to a form usable by NLS.
[rfc5.txt]:   When the program is first received at Utah it is compiled and
[rfc5.txt]:   loaded to be run in conjunction with a standard library.
[rfc5.txt]:   acceptable to the 940, and maybe in a standard form so that the
[rfc5.txt]:   NLSW need not differentiate between Utah and other NET users.
[rfc5.txt]:      this new program is compiled and used at the user site, the new
[rfc5.txt]:      times and greater code density will be the result.
[rfc5.txt]:      be easily interfaced between the user's monitor system and the
[rfc5.txt]:      problem of console extension (e.g. accommodating unusual keys and
[rfc5.txt]:   programs will take this into account and avoid any unnecessary
[rfc5.txt]:   and interrupt handlers, eventually come to the encode translator.
[rfc5.txt]:      machine in symbolic form and is compiled at the user machine
[rfc5.txt]:      single characters and vice versa, do character translation, and
[rfc5.txt]:   local display management, where it is mapped from the NET standard
[rfc5.txt]:      command and machine-state feedback will be common.
[rfc5.txt]:      It is reasonable to expect control and feedback functions not
[rfc5.txt]:   invisible IMP, is broken into appropriate sizes and labeled by the
[rfc5.txt]:   encode translator, and then goes to the NET-to-host translator.
[rfc5.txt]:      generated and used exclusively at the server-host site but
[rfc5.txt]:   hrp  It finally gets to the host, and must then go through the
[rfc5.txt]:   host reception program.  This maps and reorders the standard
[rfc5.txt]:   a translation map similar to, and perhaps more complicated than,
[rfc5.txt]:         The program is initially in symbolic form and is compiled
[rfc5.txt]:         different line widths can be handled at the user site.
[rfc5.txt]:         As things firm up, more and more complicated structural
[rfc5.txt]:         and accommodated at user sites so that the responsibility for
[rfc5.txt]:      message break up and identification so that proper assembly and
[rfc5.txt]:   From the host decoder, information does to the invisible IMP, and
[rfc5.txt]:   user-site IMP 1 and fixes them up for user-site display.  
[rfc5.txt]:      coordinates between (encode) and (decode) it is able to offer
[rfc5.txt]:      prgmctrl   Another action may be the selective translation and
[rfc5.txt]:         converted to user-style words and sent, in block form, to a
[rfc5.txt]:         The styles and translation of this information may well be a 
[rfc5.txt]:      better code production and run time checks.
[rfc5.txt]:   (symbol for up arrow) means mod. and /\ means exclusive or.
[rfc5.txt]:   Notice that the uniary minus is allowable, and parsed so you can
[rfc5.txt]:   Since there is no standard convention with bitwise operators, they
[rfc5.txt]:   all have the same precedence, and parentheses must be used for
[rfc5.txt]:   It is assumed that all arithmetic and bit operations take place in
[rfc5.txt]:   the mode and style of the machine running the code.  Anyone who
[rfc5.txt]:   which is not a sum need not have a value, and may be evaluated
[rfc5.txt]:   in places where a logical decision is called for (e.g. if and
[rfc5.txt]:   else part is optional while in expressions it is mandatory.  This
[rfc5.txt]:      The value of while and until statements is defined to be false
[rfc5.txt]:      and true (or 0 and non-zero) respectively.
[rfc5.txt]:      For statements evaluate their initial exp, by part, and to part
[rfc5.txt]:      (say put it in a register) all the better.  The increment and
[rfc5.txt]:         messagest = buildmes / demand;
[rfc5.txt]:           demandmes = "demand" "Message";
[rfc5.txt]:      PREG.  The register is a triple <x.y.r> where x and y 
[rfc5.txt]:      specify a point on the screen and r is a rotation in
[rfc5.txt]:      display can go, and numbers in between specify the relative
[rfc5.txt]:      closed, and further appends are prohibited.  It is only a
[rfc5.txt]:      Wand
[rfc5.txt]:   Program to run display and keyboard as tty.
[rfc5.txt]:               %command feedback line%
[rfc50.txt]:proposed and we feel that the missing features are probably not
[rfc50.txt]:worth doing battle over and thus delaying the specification.
[rfc50.txt]:       reconnection given some Network experience and the specific
[rfc50.txt]:   2)  INT is easy to implement and serves a useful purpose.
[rfc50.txt]:       should appear indistinguishable, and b) where a given
[rfc50.txt]:   4)  We disagree with both Steve and MAC in that no special
[rfc50.txt]:       With regard to a standard character set, we strongly
[rfc50.txt]:       support adopting one in the beginning, and in particular
[rfc50.txt]:       c)  Most of the other proposed methods demand queueing.
[rfc50.txt]:      We think there must be a standard UCC, yet we encourage
[rfc50.txt]:BLK and RSM are more straightforward than previous suggestions and
[rfc50.txt]:an intermediate IMP goes down and eats some's RFNM.  This
[rfc6.txt]:in the IMP's, IMP-HOST communication, and HOST software.
[rfc6.txt]:ASCII for transmission and convert again upon assembly at the destination
[rfc6.txt]:I suggested that this is rare and we could probably live with an overflow
[rfc6.txt]:and a bit to indicate conversion.  Also possible is a 2-bit conversion
[rfc6.txt]:indicator, one for converting before sending and one for converting after.
[rfc6.txt]:This would allow another handle for checking or controlling the system.
[rfc6.txt]:I also summarized for Bob the contents of Network Notes l, 2, and 3.
[rfc7.txt]:                           D. Mandell
[rfc7.txt]:           II-2    Handler program
[rfc7.txt]:   [The original of RFC 7 was hand-written, and only partially illegible
[rfc7.txt]:   Host IMP interface.  Its main purpose is on the one hand to define
[rfc7.txt]:   functions that will be implemented, and on the other hand to provide
[rfc7.txt]:   a base for discussions and ...(unreadable).
[rfc7.txt]:   The system is based upon two main programs: the Handler program that
[rfc7.txt]:   drives the channel hardware unit, and the Network program which
[rfc7.txt]:   These two programs exchange data through a pool of buffers, and
[rfc7.txt]:   This program multiplexes the outgoing messages (and distributes the
[rfc7.txt]:   user's (or caller, or party) requests and filling up the pool of
[rfc7.txt]:   buffers so as to keep the handler busy emitting.
[rfc7.txt]:   Multiplexing (and distribution) is based on the link identification
[rfc7.txt]:   user's program and the network program, that is in
[rfc7.txt]:   location, text length in bytes, and destination.
[rfc7.txt]:      *  inserts a 16 bits marking between the header and the text so as
[rfc7.txt]:         a one preceding the first bit of the text and, in turn,
[rfc7.txt]:      *  _updates_ the content of the interface table and moves the
[rfc7.txt]:II-2.  Handler program.
[rfc7.txt]:   (privileged instructions) and should be integrated in the I/O
[rfc7.txt]:      *  _explores_ and _updates_ the interface table (see below).
[rfc7.txt]:II-3  Buffers and Interface Table.
[rfc7.txt]:   text + heading and marking (1006 + 4 = 1010 bytes).
[rfc7.txt]:   It is through this table that the network program informs the handler
[rfc7.txt]:   with the location and length of the emitting data.
[rfc7.txt]:   network and the handler program.
[rfc7.txt]:III-1.  Why is there not a simple control procedure between the HOST and
[rfc7.txt]:   outgoing message, and will receive back an interrupt when the last
[rfc7.txt]:   Vice versa how does the Handler know the length of the incoming
[rfc7.txt]:    |                                        |/|   Special  Standard
[rfc7.txt]:   |     ^                    +-    ^     -+         Commands      | |
